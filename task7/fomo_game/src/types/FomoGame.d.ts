/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type NewWinner = ContractEventLog<{
  winner: string;
  pay: string;
  0: string;
  1: string;
}>;

export interface FomoGame extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): FomoGame;
  clone(): FomoGame;
  methods: {
    play(): PayableTransactionObject<boolean>;

    pool(): NonPayableTransactionObject<string>;

    getRandomSeed(user: string): NonPayableTransactionObject<string>;
  };
  events: {
    NewWinner(cb?: Callback<NewWinner>): EventEmitter;
    NewWinner(options?: EventOptions, cb?: Callback<NewWinner>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "NewWinner", cb: Callback<NewWinner>): void;
  once(
    event: "NewWinner",
    options: EventOptions,
    cb: Callback<NewWinner>
  ): void;
}
